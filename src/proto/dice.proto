syntax = "proto3";

option java_multiple_files = true;
option java_package = "hxgm30.dice.pb.api";
option java_outer_classname = "DiceAPIProto";

import "github.com/hexagram30/protocols/src/proto/common.proto";

package api;

service ServiceAPI {
    // Return "pong" for "ping"
    rpc Ping(common.PingRequest) returns (common.PingReply) {}
    // Dice-rolling API: some notes on the API methods:
    // * Roll - a single roll
    // * RollN - multiple roles of a single type of dice
    // * RollVarious - multiple rolls supporting different types of dice
    // * RollNMeta - multiple rolls of a single type of dice with stats
    //   included in the results
    // * RollVariousMeta - multiple rolls supporting different types of
    //   dice with stats included in the results
    rpc RollOnce(RollRequest) returns (DiceRoll) {}
    rpc RollRepeated(RollsRequest) returns (DiceRepeatedRolls) {}
    rpc RollVarious(RollVariousRequest) returns (DiceVariousRolls) {}
    rpc RollMetaRepeated(RollsRequest) returns (MetaRoll) {}
    rpc RollMetaVarious(RollVariousRequest) returns (MetaRolls) {}
    // Get version data
    rpc Version(common.VersionRequest) returns (common.VersionReply) {}
}

// RollRequest
message RollRequest {
    string diceType = 1;
}

// RollsRequest
message RollsRequest {
    string diceType = 1;
    int32 rollCount = 2;
}

// RollVariousRequest
message RollVariousRequest {
    repeated RollsRequest rolls = 1;
}

// DiceRoll
message DiceRoll {
    string diceType = 1;
    int32 result = 2;
}

// DiceRepeatedRolls
message DiceRepeatedRolls {
    string diceType = 1;
    repeated int32 results = 2;
}

// DiceVariousRolls
message DiceVariousRolls {
    repeated DiceRepeatedRolls results = 1;
}

// DiceRollStats
message DiceRollStats {
    float average = 1;
    int32 high = 2;
    int32 low = 3;
    int32 sum = 4;
}

// MetaRoll
message MetaRoll {
    DiceRoll roll = 1;
    DiceRepeatedRolls rolls = 2;
    DiceRollStats stats = 3;
}

// MetaRolls
message MetaRolls {
    repeated MetaRoll results = 1;
}
